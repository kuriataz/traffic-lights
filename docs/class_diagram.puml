@startuml traffic_lights

class controler {
  - crossing c
  + std::vector<map<int, int>> cycles
  - in_interface* in
  - out_interface* out
  --
  + controler()
  + parse(std::string url): void
  + go(): void
  + save(std::string url): void
}

class crossing {
  - density d
  - std::vector<light> lights
  + double all_load
  + std::vector<set> sets
  --
  + crossing()
  + make_sets(): void
  + set_lights(): void
  + count_sums(): void
  + update_sets(): void
}

class light {
  + int id
  + double load
  --
  + light(const int id, double load)
}

class density {
  - map<int, std::string> ids
  + map<int, double> cars
  + map<int, double> pedestrians
  --
  + density()
  + display(): void
  + get_name(int id): std::string
  - set_cars(): void
  - set_pedestrians(): void
  - set_ids(): void

}

class file_access {
  --
  + parse_input(std::map<int, double> &cars,
                           std::map<int, double> &pedestrains, std::string url): void
  + save(std::vector<set> sets, std::string url): void
  + save_detail(std::vector<set> sets, std::string url): void
}

class set {
  + int id
  + std::vector<int> lights_ids
  + double sum
  + double priority
  + int time
  + int order
  --
  + set(int id, std::vector<int> lights_ids)
  + set_priority(double priority): void
  + set_time(int cycle_time): void
  + set_order(int order): void
}

class option_definition {
  + std::string short_name
  + std::string long_name
  + int id
  + bool mandatory_argument
}

class option {
  + int id
  + std::string argument
  --
  + option(int id)
  + option(int id, std::string argument)
}

class parse_result {
  + std::vector<option> options
  + std::vector<std::string> arguments
}

interface out_interface {
  + save(std::vector<set> sets, std::string url): void
  + save_detail(std::vector<set> sets, std::string url): void
}

interface in_interface {
  + parse_input(map<int, double> &cars,
                           std::map<int, double> &pedestrains, std::string url): void
}

class main {
  + option_definition[] option_defs
  + int size
  + parse_result result
  + std::string input
  + std::string output
  + bool is_input = false
  + bool is_output = false
  + controler ctrl
}

file_access <|-- in_interface
file_access <|-- out_interface
controler --> crossing
controler ..|> out_interface
controler ..|> in_interface
crossing --> light
crossing --> density
crossing --> set
main --> controler
main --> option
main --> option_definition
main --> parse_result

@enduml
